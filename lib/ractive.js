// Generated by CoffeeScript 1.7.1
(function() {
  var bindLocal, cache, contentFor, exports, fs, initOptions, layoutHelpers, layoutsMiddleware, parseFragments, partialPattern, ractive, read, render, stripLayoutExtensionsRegEx;

  ractive = require('ractive');

  fs = require('fs');

  read = fs.readFileSync;

  cache = {};

  render = function(path, options, fn) {
    var html, key, r;
    if (typeof options === 'function') {
      fn = options;
      options = {};
    }
    options.filename = path;
    html = options.cache ? (key = path + ':string', cache[key] != null ? cache[key] : cache[key] = read(path, 'utf8')) : !options.cache ? read(path, 'utf8') : void 0;
    r = new ractive({
      template: html,
      data: options,
      stripComments: false
    });
    return fn(null, r.toHTML());
  };

  partialPattern = '&&<>&&';

  stripLayoutExtensionsRegEx = new RegExp('\n?' + partialPattern + '.+?' + partialPattern + '\n?', 'g');

  initOptions = function(options) {
    options.options = options;
    return Object.keys(layoutHelpers).forEach(function(helperName) {
      var option, value;
      option = helperName.substring(1);
      value = options[option];
      if (typeof value === 'undefined') {
        return options[option] = null;
      }
    });
  };


  /**
   * Parsea el body y guarda en las options los fragmentos correspondientes
   * a cada contenido parcial (head, body y script)
   * @param body
   * @param options
   */

  parseFragments = function(body, options) {
    var matches, regex, split;
    regex = new RegExp('\n?' + partialPattern + '.+?' + partialPattern + '\n?', 'g');
    split = body.split(regex);
    matches = body.match(regex);
    options.body = split[0].trim();
    if (matches !== null) {
      return matches.forEach(function(match, idx) {
        var content, name;
        name = match.split(partialPattern)[1];
        content = split[idx + 1].trim();
        if (options[name]) {
          return options[name] += '\n' + content;
        } else {
          return options[name] = content;
        }
      });
    }
  };

  layoutsMiddleware = function(req, res, next) {
    render = res.render;
    res.render = function(view, options, fn) {
      initOptions(options);
      return render.call(res, view, options, function(err, body) {
        if (err) {
          if (fn) {
            return fn(err);
          } else {
            throw err;
          }
        }
        if (req.xhr || options.layout === false) {
          return res.send(body.replace(stripLayoutExtensionsRegEx, ''));
        } else {
          parseFragments(body, options);
          return render.call(res, options.layout || 'layout', options, fn);
        }
      });
    };
    return next();
  };

  contentFor = function(name) {
    return partialPattern + name + partialPattern;
  };

  bindLocal = function(name) {
    return function(value) {
      return this.options[name] = value;
    };
  };

  layoutHelpers = {
    $layout: bindLocal('layout'),
    $id: bindLocal('id'),
    $classes: bindLocal('classes'),
    $style: bindLocal('style'),
    $title: bindLocal('title'),
    $footer: bindLocal('footer'),
    $head: contentFor('head'),
    $body: contentFor('body'),
    $js: bindLocal('js'),
    $script: contentFor('script')
  };

  module.exports = exports = {
    render: render,
    layoutsMiddleware: layoutsMiddleware
  };

}).call(this);
